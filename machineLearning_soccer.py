# -*- coding: utf-8 -*-
"""Copy of disrupt21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vF6ZkJPEnKliCUj1j4wbbRVqSxl6BH0r
"""





"""<img src="https://static.wikia.nocookie.net/bttf/images/1/13/Almanacfront.jpg/revision/latest/scale-to-width-down/300?cb=20070110144009" width="250" align="left"/>
<font face = "Clarendon" size=6 color=""> 	Introduction</font>
<br/>
<font face = "Clarendon" size=5 color=""> 	
"See this book? It tells the future. It tells the outcome of every major sporting event through the end of the century... soccer, baseball, basketball, horse racing, boxing... the records in this book are worth millions. " That was the line of old Biff discussing the almanac with his younger self in 1955. Who wouldn't want to have a book like that?
<br/>
Well, have you ever thought about finding out the results of the Brazilian championship games? This notebook contains the code used to make game predictions seeking the highest possible number of correct results.</font>
<br/>





"""

# Libraries
import pandas as pd
import numpy as np

from google_drive_downloader import GoogleDriveDownloader as gdd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Loading CSV from Google Drive
# The file used was downloaded from the site www.football-data.co.uk, which aggregates information from several championships
# from around the world.
data_google_id = '1cexvKiMVcEbwrWJC4WS7kFVnn4_K5Hvq'
gdd.download_file_from_google_drive(file_id=data_google_id, 
                                    dest_path = './BRA.csv', 
                                    showsize = True)

data=pd.read_csv('BRA.csv',delimiter=',')
# Removing some columns that are not relevant for the calculation
num_data = data.drop(['Country','League','Season','Date','Time','Home','Away','game_id','home_id','Away_id', 'AG','PD','PH'],1)
# Checking the first 5 lines of the file to be used 
display(num_data.head())

# Separate elements for training using logistic regression, where Y is the final answer, and X is everything except the answer
x = num_data.drop(['Res'],1)

y = data['Res']

x_train, x_test, y_train, y_test = train_test_split(x, y, 
                                                    test_size = 0.3, 
                                                    random_state = 42)

model = LogisticRegression(solver='lbfgs', max_iter=400).fit(x_train, y_train)

y_pred = model.predict(x_test)

print(x_train, x_test, y_train, y_test)

#HG = Home team goals
#PA = away team win probability provided by Pinacle (English bookmaker)
#MaxH = home team win probability provided by OddsPortal (English bookmaker)
#MaxD = draw probability provided by OddsPortal (English bookmaker)
#MaxA = away team win probability provided by OddsPortal (English bookmaker)
#AvgH = average home win probability provided by OddsPortal (English bookmaker)
#AvgD = average draw probability provided by OddsPortal (English bookmaker)
#AvgA = average probability of winning by the away team provided by OddsPortal (English bookmaker)

# Comparison of prediction versus response
pd.DataFrame({'pred': y_pred, 'resp': y_test})

# Overall prediction success percentage
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred))

# Confusion matrix in array format
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_pred)

# Confusion matrix in visual format
from sklearn.metrics import plot_confusion_matrix
_ = plot_confusion_matrix(model, x_test, y_test, cmap = 'Purples', values_format='.0f')

#0 = Tie
#1 = Home team wins
#2 = Away team wins

#We see, for example, that out of 360 home team win predictions (1), 277 are correct